[project]
name = "time-recorder"
version = "1.1.0"
description = "A tool for recording and managing work time"
authors = [
    { name = "Jubin Lirawi", email = "jubin@lirawi.de" }
]
requires-python = ">=3.10"
license = { file = "LICENSE" }
dependencies = [
    "colorama",
    "datetime",
    "holidays",
    "logging",
    "pandas",
    "pathlib",
    "psutil",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "PyYAML",
]

[tool.ruff]
# do not check jupyter notebooks
extend-exclude = [
    "*.ipynb",
]
target-version = "py313"  # assume Python 3.13
indent-width = 4  # use 4 spaces for indentation

[tool.ruff.lint.per-file-ignores]
# ignore some checks in test cases
"test_*.py" = [
    "D100",     # undocumented-public-module
    "D103",     # undocumented-public-function
    "INP001",   # implicit-namespace-package
    "S101",     # assert
    "T201",     # print
    "PLR2004",  # magic-value-comparison
]

[tool.ruff.lint]
# ignore following rules
ignore = [
    "D104",     # undocumented-public-package
    "PD901",    # pandas-df-variable-name
    "SIM108",   # if-else-block-instead-of-if-exp
    "S101",     # assert-used
]

# enforce following rules
select = [
    "A",        # flake8-builtins
    "ANN",      # flake8-annotations
    "ARG",      # flake8-unused-arguments
    "ASYNC",    # flake8-async
    "B",        # flake8-bugbear
    "BLE",      # flake8-blind-except
    "C4",       # flake8-comprehensions
    "C90",      # mccabe
    "COM",      # flake8-commas
    "D",        # pydocstyle
    "E",        # pycodestyle Error
    "ERA",      # eradicate
    "EXE",      # flake8-executable
    "F",        # pyflakes
    "FBT",      # flake8-boolean-trap
    #"FIX",      # flake8-fixme
    "FLY",      # flynt
    "I",        # isort
    "ICN",      # flake8-import-conventions
    "INP",      # flake8-no-pep420
    "INT",      # flake8-gettext
    "ISC",      # flake8-implicit-str-concat
    #"G",        # flake8-logging-format
    "LOG",      # flake8-logging
    "N",        # pep8-naming
    "NPY",      # NumPy specific rules
    "PD",       # pandas-vet
    "PERF",     # perflint
    "PIE",      # flake8-pie
    "PL",       # pylint
    "PT",       # flake8-pytest-style
    "PTH",      # flake8-use-pathlib
    "RSE",      # flake8-raise
    "RET",      # flake8-return
    "S",        # flake8-bandit
    "SIM",      # flake8-simplify
    "SLF",      # flake8-self
    "T10",      # flake8-debugger
    "T20",      # flake8-print
    "TC",       # flake8-type-checking
    "UP",       # pyupgrade
    "Q",        # flake8-quotes
    "W",        # pycodestyle Warning
]

[tool.ruff.format]
line-ending = "lf"  # unix style line ending
docstring-code-format = true
quote-style = "double"  # use double quotes for strings
indent-style = "space"

[tool.ruff.lint.pydocstyle]
convention = "numpy"   # Docstring style

[tool.ruff.lint.pycodestyle]
max-line-length = 140

[tool.pytest.ini_options]
markers = [
    "fast: mark test as fast (less than 10 sseconds)",
    "slow: mark test as slow (more than 30 seconds, deselect with '-m \"not slow\"')",
    "unit: marks unit tests",
    "integration: marks integration tests",
]
addopts = "--cov=src --cov-report=term-missing --cov-fail-under=90 --no-cov-on-fail"  # pytest coverage options
